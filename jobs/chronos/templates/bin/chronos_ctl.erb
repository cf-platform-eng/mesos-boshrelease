#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'chronos'
export CHRONOS_PID_FILE=${CHRONOS_PID_DIR}/chronos.pid

# Set the hostname
if hostname=$(public_hostname); then
    hostname $hostname
else
    hostname <%= index %>.<%= name %>.<%= spec.networks.methods(false).grep(/[^=]$/).first.to_s %>.<%= spec.deployment %>.<%= spec.dns_domain_name %>
fi

<%
   def openstruct_to_hash(os)
     os.marshal_dump.map do |key, element|
       element.is_a?(OpenStruct) ? { key => openstruct_to_hash(element) } : { key => element }
     end.reduce(&:merge)
   end

   networks = openstruct_to_hash(spec.networks)
   listen_ip = networks.values.find { |net| net.has_key?(:default) }[:ip]
%>

case $1 in

  start)
    pid_guard ${CHRONOS_PID_FILE} ${JOB_NAME}
    echo $$ > ${CHRONOS_PID_FILE}

    # Increase the default number of open file descriptors
    ulimit -n 8192

    # Create Chronos user & group
    create_group ${CHRONOS_GROUP}
    create_user ${CHRONOS_USER} ${CHRONOS_GROUP}

    # Read ZooKeeper Hosts
    ZK_MESOS=`cat ${CHRONOS_CONF_DIR}/zoo_mesos.cfg`

    # Read ZooKeeper Hosts
    ZK_HOSTS=`cat ${CHRONOS_CONF_DIR}/zoo_hosts.cfg`

    # Process IP
    export LIBPROCESS_IP=<%= listen_ip %>

    # Start Chronos service
    exec chpst -u ${CHRONOS_USER}:${CHRONOS_GROUP} java \
           -Xmx"${CHRONOS_JAVA_HEAP_SIZE}" \
           -Xms"${CHRONOS_JAVA_HEAP_SIZE}" \
           -Dfile.encoding=UTF-8 \
           -Djava.io.tmpdir=${CHRONOS_TMP_DIR} \
           -cp /var/vcap/packages/chronos/chronos.jar org.apache.mesos.chronos.scheduler.Main \
           ${CHRONOS_CASSANDRA_OPTIONS:-} \
           --cluster_name "${CHRONOS_CLUSTER_NAME}" \
           --disable_after_failures "${CHRONOS_DISABLE_AFTER_FAILURES}" \
           --failover_timeout "${CHRONOS_FAILOVER_TIMEOUT}" \
           --failure_retry "${CHRONOS_FAILURE_RETRY}" \
           ${CHRONOS_GRAPHITE_OPTIONS:-} \
           --http_credentials "${CHRONOS_HTTP_CREDENTIALS}" \
           --http_port "${CHRONOS_HTTP_PORT}" \
           --http_realm "${CHRONOS_HTTP_REALM}" \
           --https_port "${CHRONOS_HTTPS_PORT}" \
           --job_history_limit "${CHRONOS_JOB_HISTORY_LIMIT}" \
           --leader_max_idle_time "${CHRONOS_LEADER_MAX_IDLE_TIME}" \
           ${CHRONOS_MAIL_OPTIONS:-} \
           --master ${ZK_MESOS} \
           ${CHRONOS_CHECKPOINT:-} \
           ${CHRONOS_AUTHENTICATION_PRINCIPAL:-} \
           ${CHRONOS_AUTHENTICATION_SECRET:-} \
           --mesos_framework_name "${CHRONOS_MESOS_FRAMEWORK_NAME}" \
           --mesos_role "${CHRONOS_MESOS_ROLE}" \
           --mesos_task_cpu "${CHRONOS_MESOS_TASK_CPU}" \
           --mesos_task_disk "${CHRONOS_MESOS_TASK_DISK}" \
           --mesos_task_mem "${CHRONOS_MESOS_TASK_MEM}" \
           ${CHRONOS_RAVEN_OPTIONS:-} \
           --reconciliation_interval "${CHRONOS_RECONCILIATION_INTERVAL}" \
           --schedule_horizon "${CHRONOS_SCHEDULE_HORIZON}" \
           ${CHRONOS_SLACK_OPTIONS:-} \
           --task_epsilon "${CHRONOS_TASK_EPSILON}" \
           --user "${CHRONOS_MESOS_USER}" \
           --zk_hosts ${ZK_HOSTS} \
           --zk_path "${CHRONOS_ZK_PATH}" \
           --zk_timeout "${CHRONOS_ZK_TIMEOUT}" \
           >>${CHRONOS_LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
           2>>${CHRONOS_LOG_DIR}/${OUTPUT_LABEL}.stderr.log
    ;;

  stop)
    # Stop Chronos service
    kill_and_wait ${CHRONOS_PID_FILE}
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
